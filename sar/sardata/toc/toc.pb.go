// Code generated by protoc-gen-go.
// source: github.com/riannucci/sarchive/sar/sardata/toc/toc.proto
// DO NOT EDIT!

/*
Package toc is a generated protocol buffer package.

It is generated from these files:
	github.com/riannucci/sarchive/sar/sardata/toc/toc.proto

It has these top-level messages:
	CommonMode
	PosixMode
	WinMode
	File
	SymLink
	Entry
	Tree
	TOC
*/
package toc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonMode struct {
	Readonly bool `protobuf:"varint,1,opt,name=readonly" json:"readonly,omitempty"`
}

func (m *CommonMode) Reset()                    { *m = CommonMode{} }
func (m *CommonMode) String() string            { return proto.CompactTextString(m) }
func (*CommonMode) ProtoMessage()               {}
func (*CommonMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonMode) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

type PosixMode struct {
	Executable bool `protobuf:"varint,1,opt,name=executable" json:"executable,omitempty"`
}

func (m *PosixMode) Reset()                    { *m = PosixMode{} }
func (m *PosixMode) String() string            { return proto.CompactTextString(m) }
func (*PosixMode) ProtoMessage()               {}
func (*PosixMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PosixMode) GetExecutable() bool {
	if m != nil {
		return m.Executable
	}
	return false
}

type WinMode struct {
	System bool `protobuf:"varint,1,opt,name=system" json:"system,omitempty"`
	Hidden bool `protobuf:"varint,2,opt,name=hidden" json:"hidden,omitempty"`
}

func (m *WinMode) Reset()                    { *m = WinMode{} }
func (m *WinMode) String() string            { return proto.CompactTextString(m) }
func (*WinMode) ProtoMessage()               {}
func (*WinMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WinMode) GetSystem() bool {
	if m != nil {
		return m.System
	}
	return false
}

func (m *WinMode) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type File struct {
	// the size of the File's data in the decompressed bytestream. The depth-first
	// order of all Files in the TOC is the order of files in the archive_data
	// section.
	Size       uint64      `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	CommonMode *CommonMode `protobuf:"bytes,2,opt,name=common_mode,json=commonMode" json:"common_mode,omitempty"`
	PosixMode  *PosixMode  `protobuf:"bytes,3,opt,name=posix_mode,json=posixMode" json:"posix_mode,omitempty"`
	WinMode    *WinMode    `protobuf:"bytes,4,opt,name=win_mode,json=winMode" json:"win_mode,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *File) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetCommonMode() *CommonMode {
	if m != nil {
		return m.CommonMode
	}
	return nil
}

func (m *File) GetPosixMode() *PosixMode {
	if m != nil {
		return m.PosixMode
	}
	return nil
}

func (m *File) GetWinMode() *WinMode {
	if m != nil {
		return m.WinMode
	}
	return nil
}

type SymLink struct {
	Target []string `protobuf:"bytes,1,rep,name=target" json:"target,omitempty"`
}

func (m *SymLink) Reset()                    { *m = SymLink{} }
func (m *SymLink) String() string            { return proto.CompactTextString(m) }
func (*SymLink) ProtoMessage()               {}
func (*SymLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SymLink) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

type Entry struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Etype:
	//	*Entry_File
	//	*Entry_Symlink
	//	*Entry_Tree
	Etype isEntry_Etype `protobuf_oneof:"etype"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isEntry_Etype interface {
	isEntry_Etype()
}

type Entry_File struct {
	File *File `protobuf:"bytes,2,opt,name=file,oneof"`
}
type Entry_Symlink struct {
	Symlink *SymLink `protobuf:"bytes,3,opt,name=symlink,oneof"`
}
type Entry_Tree struct {
	Tree *Tree `protobuf:"bytes,4,opt,name=tree,oneof"`
}

func (*Entry_File) isEntry_Etype()    {}
func (*Entry_Symlink) isEntry_Etype() {}
func (*Entry_Tree) isEntry_Etype()    {}

func (m *Entry) GetEtype() isEntry_Etype {
	if m != nil {
		return m.Etype
	}
	return nil
}

func (m *Entry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entry) GetFile() *File {
	if x, ok := m.GetEtype().(*Entry_File); ok {
		return x.File
	}
	return nil
}

func (m *Entry) GetSymlink() *SymLink {
	if x, ok := m.GetEtype().(*Entry_Symlink); ok {
		return x.Symlink
	}
	return nil
}

func (m *Entry) GetTree() *Tree {
	if x, ok := m.GetEtype().(*Entry_Tree); ok {
		return x.Tree
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Entry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Entry_OneofMarshaler, _Entry_OneofUnmarshaler, _Entry_OneofSizer, []interface{}{
		(*Entry_File)(nil),
		(*Entry_Symlink)(nil),
		(*Entry_Tree)(nil),
	}
}

func _Entry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Entry)
	// etype
	switch x := m.Etype.(type) {
	case *Entry_File:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case *Entry_Symlink:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Symlink); err != nil {
			return err
		}
	case *Entry_Tree:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tree); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Entry.Etype has unexpected type %T", x)
	}
	return nil
}

func _Entry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Entry)
	switch tag {
	case 2: // etype.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(File)
		err := b.DecodeMessage(msg)
		m.Etype = &Entry_File{msg}
		return true, err
	case 3: // etype.symlink
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SymLink)
		err := b.DecodeMessage(msg)
		m.Etype = &Entry_Symlink{msg}
		return true, err
	case 4: // etype.tree
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Tree)
		err := b.DecodeMessage(msg)
		m.Etype = &Entry_Tree{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Entry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Entry)
	// etype
	switch x := m.Etype.(type) {
	case *Entry_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entry_Symlink:
		s := proto.Size(x.Symlink)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entry_Tree:
		s := proto.Size(x.Tree)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Tree struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Tree) Reset()                    { *m = Tree{} }
func (m *Tree) String() string            { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()               {}
func (*Tree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Tree) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type TOC struct {
	// Set to true if this archive can safely be unpacked on a case insensitive
	// filesystem.
	CaseSafe bool `protobuf:"varint,1,opt,name=case_safe,json=caseSafe" json:"case_safe,omitempty"`
	// root contains the file/link paths, metadata and data offsets in the solid
	// archive body.
	Root *Tree `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
}

func (m *TOC) Reset()                    { *m = TOC{} }
func (m *TOC) String() string            { return proto.CompactTextString(m) }
func (*TOC) ProtoMessage()               {}
func (*TOC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TOC) GetCaseSafe() bool {
	if m != nil {
		return m.CaseSafe
	}
	return false
}

func (m *TOC) GetRoot() *Tree {
	if m != nil {
		return m.Root
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonMode)(nil), "toc.CommonMode")
	proto.RegisterType((*PosixMode)(nil), "toc.PosixMode")
	proto.RegisterType((*WinMode)(nil), "toc.WinMode")
	proto.RegisterType((*File)(nil), "toc.File")
	proto.RegisterType((*SymLink)(nil), "toc.SymLink")
	proto.RegisterType((*Entry)(nil), "toc.Entry")
	proto.RegisterType((*Tree)(nil), "toc.Tree")
	proto.RegisterType((*TOC)(nil), "toc.TOC")
}

func init() {
	proto.RegisterFile("github.com/riannucci/sarchive/sar/sardata/toc/toc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x92, 0xdf, 0x6a, 0x14, 0x31,
	0x14, 0xc6, 0x3b, 0xee, 0xb4, 0xb3, 0x73, 0x56, 0x14, 0x72, 0x21, 0x8b, 0xa2, 0xd6, 0x41, 0x70,
	0x41, 0xdd, 0x95, 0x7a, 0x21, 0x5e, 0x6a, 0x51, 0x7a, 0xa1, 0x28, 0x69, 0xc1, 0xcb, 0x92, 0xcd,
	0x9c, 0xed, 0x86, 0x4e, 0x92, 0x25, 0xc9, 0xda, 0x8e, 0x4f, 0xe1, 0x43, 0xf8, 0xa0, 0x92, 0x93,
	0xcc, 0xae, 0x5e, 0x04, 0xce, 0xdf, 0xef, 0x7c, 0x3f, 0x66, 0xe0, 0xdd, 0x95, 0x0a, 0xeb, 0xed,
	0x72, 0x2e, 0xad, 0x5e, 0x38, 0x25, 0x8c, 0xd9, 0x4a, 0xa9, 0x16, 0x5e, 0x38, 0xb9, 0x56, 0x3f,
	0x31, 0x06, 0xf1, 0xb5, 0x22, 0x88, 0x45, 0xb0, 0x32, 0xbe, 0xf9, 0xc6, 0xd9, 0x60, 0xd9, 0x28,
	0x58, 0xd9, 0xcc, 0x00, 0x4e, 0xad, 0xd6, 0xd6, 0x7c, 0xb5, 0x2d, 0xb2, 0x87, 0x30, 0x76, 0x28,
	0x5a, 0x6b, 0xba, 0x7e, 0x5a, 0x1c, 0x17, 0xb3, 0x31, 0xdf, 0xe5, 0xcd, 0x4b, 0xa8, 0xbf, 0x5b,
	0xaf, 0x6e, 0x69, 0xf0, 0x09, 0x00, 0xde, 0xa2, 0xdc, 0x06, 0xb1, 0xec, 0x30, 0x8f, 0xfe, 0x53,
	0x69, 0xde, 0x43, 0xf5, 0x43, 0x25, 0xcd, 0x07, 0x70, 0xe4, 0x7b, 0x1f, 0x50, 0xe7, 0xb1, 0x9c,
	0xc5, 0xfa, 0x5a, 0xb5, 0x2d, 0x9a, 0xe9, 0x9d, 0x54, 0x4f, 0x59, 0xf3, 0xa7, 0x80, 0xf2, 0xb3,
	0xea, 0x90, 0x31, 0x28, 0xbd, 0xfa, 0x95, 0xd4, 0x4b, 0x4e, 0x31, 0x7b, 0x03, 0x13, 0x49, 0x76,
	0x2f, 0xb5, 0x6d, 0x91, 0x36, 0x27, 0x27, 0xf7, 0xe7, 0x11, 0x6a, 0x8f, 0xc1, 0x41, 0xee, 0x91,
	0x5e, 0x03, 0x6c, 0xa2, 0xed, 0xb4, 0x30, 0xa2, 0x85, 0x7b, 0xb4, 0xb0, 0xa3, 0xe1, 0xf5, 0x66,
	0x07, 0xf6, 0x02, 0xc6, 0x37, 0x2a, 0xab, 0x97, 0x34, 0x7c, 0x97, 0x86, 0x33, 0x0d, 0xaf, 0x6e,
	0x52, 0xd0, 0x3c, 0x83, 0xea, 0xbc, 0xd7, 0x5f, 0x94, 0xb9, 0x8e, 0x24, 0x41, 0xb8, 0x2b, 0x0c,
	0xd3, 0xe2, 0x78, 0x34, 0xab, 0x79, 0xce, 0x9a, 0xdf, 0x05, 0x1c, 0x7e, 0x32, 0xc1, 0xf5, 0x11,
	0xc5, 0x08, 0x9d, 0x50, 0x6a, 0x4e, 0x31, 0x7b, 0x0a, 0xe5, 0x4a, 0x75, 0x03, 0x43, 0x4d, 0x57,
	0x22, 0xf7, 0xd9, 0x01, 0xa7, 0x06, 0x9b, 0x41, 0xe5, 0x7b, 0xdd, 0x29, 0x73, 0x9d, 0x6d, 0x27,
	0x27, 0xf9, 0xea, 0xd9, 0x01, 0x1f, 0xda, 0x51, 0x2a, 0x38, 0x1c, 0x0c, 0x27, 0xa9, 0x0b, 0x87,
	0x24, 0x15, 0x1b, 0x1f, 0x2b, 0x38, 0xc4, 0xd0, 0x6f, 0xb0, 0x79, 0x05, 0x65, 0x6c, 0xb0, 0xe7,
	0x50, 0xa1, 0x09, 0x4e, 0xa1, 0x27, 0xcf, 0x93, 0x13, 0xa0, 0x25, 0x72, 0xcb, 0x87, 0x56, 0xf3,
	0x01, 0x46, 0x17, 0xdf, 0x4e, 0xd9, 0x23, 0xa8, 0xa5, 0xf0, 0x78, 0xe9, 0xc5, 0x6a, 0xf8, 0xd6,
	0xe3, 0x58, 0x38, 0x17, 0x2b, 0x64, 0x8f, 0xa1, 0x74, 0xd6, 0x86, 0xff, 0x30, 0xe2, 0x09, 0x4e,
	0xe5, 0xe5, 0x11, 0xfd, 0x6b, 0x6f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xda, 0xfc, 0xb4, 0xd7,
	0xa6, 0x02, 0x00, 0x00,
}
